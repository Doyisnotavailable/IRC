The socket() function creates an endpoint for communication and returns a socket descriptor representing the endpoint.
Different types of sockets provide different communication services.
The address domain requested, either AF_INET, AF_INET6, AF_UNIX, or AF_RAW.
    
    int socket(int domain, int type, int protocol);

The socket() function may fail if:

[EACCES]
The process does not have appropriate privileges.
[ENOBUFS]
Insufficient resources were available in the system to perform the operation.
[ENOMEM]
Insufficient memory was available to fulfill the request.

The setsockopt() function is used to set options on a socket. It allows you to configure various socket-level options to control the behavior of the socket. In the provided example, it's being used to set the SO_REUSEADDR option on a socket.


    int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);



fcntl() is used to set the O_NONBLOCK flag on the server socket file descriptor. This flag sets the socket to non-blocking mode, which means that operations such as read() and write() on the socket will return immediately, even if there is no data available to read or the write operation cannot be completed immediately. and this provides a flexible and efficient mechanism for handling I/O operations asynchronously without blocking the program’s execution.

    int fcntl(int fd, int cmd, ... /* arg */ );

The bind() function enables you to assign a specific address and port to a socket, thus providing it with a unique identity on the network. By associating a socket with an address and port, you enable other processes to communicate with it over the network.

    int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

• When you create a socket using the socket() function, it's just a communication endpoint without any specific address or port associated with it.

You can bind your program to any port within the available range that we discussed earlier. However, there is an important point to note. If you bind your program to port 0, the operating system will automatically bind it to any available port within the range of Dynamic or private ports (49152 to 65535). This can be useful when the specific port number is not important.

